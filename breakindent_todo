# HG changeset patch
# Parent 87e40d34d8441d0c9c1aa8a50254278001793527

diff --git a/src/misc1.c b/src/misc1.c
--- a/src/misc1.c
+++ b/src/misc1.c
@@ -494,9 +494,6 @@ get_breakindent_win(wp, line)
     win_T	*wp;
     char_u	*line; /* start of the line */
 {
-    static int	    prev_indent = 0;  /* cached indent value */
-    static long	    prev_ts     = 0L; /* cached tabstop value */
-    static char_u   *prev_line = NULL; /* cached pointer to line */
     int		    bri = 0;
     /* window width minus window margin space, i.e. what rests for text */
     const int	    eff_wwidth = W_WIDTH(wp)
@@ -504,17 +501,9 @@ get_breakindent_win(wp, line)
 				&& (vim_strchr(p_cpo, CPO_NUMCOL) == NULL)
 						? number_width(wp) + 1 : 0);
 
-    /* used cached indent, unless pointer or 'tabstop' changed */
-    if (prev_line != line || prev_ts != wp->w_buffer->b_p_ts)
-    {
-	prev_line = line;
-	prev_ts = wp->w_buffer->b_p_ts;
-	prev_indent = get_indent_str(line,
+    bri = get_indent_str(line,
 		  (int)wp->w_buffer->b_p_ts, wp->w_p_list) + wp->w_p_brishift;
-    }
-
-    /* indent minus the length of the showbreak string */
-    bri = prev_indent;
+
     if (wp->w_p_brisbr)
 	bri -= vim_strsize(p_sbr);
 
diff --git a/src/ops.c b/src/ops.c
--- a/src/ops.c
+++ b/src/ops.c
@@ -420,8 +420,7 @@ shift_block(oap, amount)
 	}
 	for ( ; vim_iswhite(*bd.textstart); )
 	{
-	    /* TODO: is passing bd.textstart for start of the line OK? */
-	    incr = lbr_chartabsize_adv(bd.textstart, &bd.textstart,
+	    incr = lbr_chartabsize_adv(oldp, &bd.textstart,
 						    (colnr_T)(bd.start_vcol));
 	    total += incr;
 	    bd.start_vcol += incr;
@@ -482,7 +481,7 @@ shift_block(oap, amount)
 
 	while (vim_iswhite(*non_white))
 	{
-	    incr = lbr_chartabsize_adv(bd.textstart, &non_white, non_white_col);
+	    incr = lbr_chartabsize_adv(oldp, &non_white, non_white_col);
 	    non_white_col += incr;
 	}
 
@@ -507,10 +506,7 @@ shift_block(oap, amount)
 	    verbatim_copy_width -= bd.start_char_vcols;
 	while (verbatim_copy_width < destination_col)
 	{
-	    char_u *line = verbatim_copy_end;
-
-	    /* TODO: is passing verbatim_copy_end for start of the line OK? */
-	    incr = lbr_chartabsize(line, verbatim_copy_end,
+	    incr = lbr_chartabsize(oldp, verbatim_copy_end,
 							 verbatim_copy_width);
 	    if (verbatim_copy_width + incr > destination_col)
 		break;
diff --git a/src/option.c b/src/option.c
--- a/src/option.c
+++ b/src/option.c
@@ -664,7 +664,7 @@ static struct vimoption
     {"breakindentopt", "briopt", P_STRING|P_ALLOCED|P_VI_DEF|P_RBUF|P_COMMA|P_NODUP,
 #ifdef FEAT_LINEBREAK
 			    (char_u *)VAR_WIN, PV_BRIOPT,
-			    {(char_u *)"", (char_u *)NULL}
+			    {(char_u *)"shift:0,min:20", (char_u *)NULL}
 #else
 			    (char_u *)NULL, PV_NONE,
 			    {(char_u *)"", (char_u *)NULL}
@@ -11982,7 +11982,7 @@ briopt_check()
 {
     char_u	*p;
     int		bri_shift = 0;
-    long	bri_min = 20;
+    long	bri_min = 0;
     int		bri_sbr = FALSE;
 
     p = curwin->w_p_briopt;
diff --git a/src/screen.c b/src/screen.c
--- a/src/screen.c
+++ b/src/screen.c
@@ -4430,8 +4430,7 @@ win_line(wp, lnum, startrow, endrow, noc
 				has_mbyte ? mb_l :
 # endif
 				1);
-		    /* TODO: is passing p for start of the line OK? */
-		    n_extra = win_lbr_chartabsize(wp, p, p, (colnr_T)vcol,
+		    n_extra = win_lbr_chartabsize(wp, line, p, (colnr_T)vcol,
 								    NULL) - 1;
 		    c_extra = ' ';
 		    if (vim_iswhite(c))
diff --git a/src/testdir/test_breakindent.in b/src/testdir/test_breakindent.in
--- a/src/testdir/test_breakindent.in
+++ b/src/testdir/test_breakindent.in
@@ -66,7 +66,6 @@ STARTTEST
 :set cpo+=n sbr=~ nu nuw=4 nolist briopt=sbr,min:0
 :let line1=ScreenChar(10)
 :call DoRecordScreen()
-:wincmd p
 :let g:test="\n Test 11: strdisplaywidth when breakindent is on"
 :set cpo-=n sbr=>> nu nuw=4 nolist briopt= ts=4
 :let text=getline(2) "skip leading tab when calculating text width
