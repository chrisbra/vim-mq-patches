Patch for Vim to provide a new option called 'splitvertical' which opens
splits vertically rather than horizontally by default.
More details: https://www.reddit.com/r/vim/comments/2irn8j/vertical_split_by_default/cl4xzqs

Most recently tested against Vim 8.0.1532

Original copyright 2009-2015 Christian Brabandt: https://github.com/chrisbra/vim-mq-patches#readme
Recent changes by Kartik Agaram at http://akkartik.name/vim-splitvertical.patch

To apply:
  $ git clone https://github.com/vim/vim
  $ cd vim
  $ patch -p1 < vim-splitvertical.patch
  $ cd src
  $ make cmdidxs   # need to recreate ex_cmdidxs.h
  $ make
  $ ./vim  # test it out!

Report issues to Kartik: vim@akkartik.com

diff --git a/runtime/doc/options.txt b/runtime/doc/options.txt
--- a/runtime/doc/options.txt
+++ b/runtime/doc/options.txt
@@ -7302,6 +7302,14 @@ A jump table for the options with a short description can be found at |Q_op|.
 	When on, splitting a window will put the new window right of the
 	current one. |:vsplit|
 
+			*'splitvertical'* *'spv'* *'nosplitvertical'* *'nospv'*
+'splitvertical' 'spv'	boolean	(default off)
+			global
+			{not in Vi}
+			{not available when compiled without the |+vertsplit|
+			feature}
+	When on, splitting a window will always be performed vertical. |:vsplit|
+
 			   *'startofline'* *'sol'* *'nostartofline'* *'nosol'*
 'startofline' 'sol'	boolean	(default on)
 			global
diff --git a/runtime/doc/windows.txt b/runtime/doc/windows.txt
--- a/runtime/doc/windows.txt
+++ b/runtime/doc/windows.txt
@@ -152,6 +152,9 @@ CTRL-W CTRL-S						*CTRL-W_CTRL-S*
 		'eadirection' isn't "hor", and one of them is higher than the
 		current or the new window).
 
+		The window will be split vertically, if 'splitvertical' is
+		set.
+
 		If [file] is given it will be edited in the new window.  If it
 		is not loaded in any buffer, it will be read.  Else the new
 		window will use the already loaded buffer.
@@ -268,6 +271,12 @@ window will appear.
 		the far right and occupies the full height of the Vim window.
 		Doesn't work for |:execute| and |:normal|.
 
+								*:horizontal*
+:hor[izontal] {cmd}
+		Execute {cmd}.  If it contains a command that splits a window,
+		it will be split horizontally.
+		Doesn't work for |:execute| and |:normal|.
+
 These command modifiers can be combined to make a vertically split window
 occupy the full height.  Example: >
 	:vertical topleft split tags
diff --git a/runtime/optwin.vim b/runtime/optwin.vim
--- a/runtime/optwin.vim
+++ b/runtime/optwin.vim
@@ -490,6 +490,8 @@ call <SID>BinOptionG("sb", &sb)
 if has("vertsplit")
   call append("$", "splitright\ta new window is put right of the current one")
   call <SID>BinOptionG("spr", &spr)
+  call append("$", "splitvertical\ta Splitting windows will be performed vertically")
+  call <SID>BinOptionG("spv", &spv)
 endif
 if has("scrollbind")
   call append("$", "scrollbind\tthis window scrolls together with other bound windows")
diff --git a/runtime/syntax/vim.vim b/runtime/syntax/vim.vim
--- a/runtime/syntax/vim.vim
+++ b/runtime/syntax/vim.vim
@@ -27,6 +27,7 @@ syn keyword vimCommand contained	al[l] argg[lobal] b[uffer] bl[ast] brea[k] buff
 syn keyword vimCommand contained	ar[gs] argl[ocal] ba[ll] bm[odified] breaka[dd] bun[load] cad[dbuffer] cbo[ttom] cex[pr] cgete[xpr] cl[ist] cnew[er] comc[lear] cpf[ile] cuna[bbrev] delel delf[unction] dif[fupdate] difft[his] do e[dit] echon endfo[r] exu[sage] fin[d] foldc[lose] g  h[elp] hi if is[earch] kee[pmarks] lNf[ile] lan[guage] lch[dir] lefta[bove] lgetb[uffer] ll lnew[er] lockv[ar] ls lvimgrepa[dd] mat[ch] mksp[ell] 
 syn match   vimCommand contained	"\<z[-+^.=]\=\>"
 syn keyword vimStdPlugin contained	DiffOrig Man N[ext] P[rint] S  TOhtml XMLent XMLns 
+syn keyword vimCommand contained hor[izontal]
 
 " vimOptions are caught only when contained in a vimSet {{{2
 syn keyword vimOption contained	acd ambw arshape background ballooneval bg bomb bs cb ch cinoptions cms commentstring copyindent cscopepathcomp csprg cursorbind delcombine digraph eadirection emo equalprg expandtab fdls fex fileignorecase fml foldlevel formatexpr gcr go guifontset helpheight history hlsearch imactivatekey imi imstyle indentkeys isf isprint km laststatus lisp loadplugins lz mat maxmempattern mh mmp more mouses mzq number opendevice paragraphs penc pi previewheight printmbcharset pvw rdt renderoptions rl ru sbo scrollbind secure shcf shelltemp shortmess showtabline sj smd spell splitbelow ssl stl sw sxe tabpagemax tags tbs termguicolors tf title tms ts ttybuiltin tx undolevels vbs viewdir vop wd wic wildmode winheight wm wrapscan
@@ -37,6 +38,7 @@ syn keyword vimOption contained	aleph arab autowrite backupdir belloff bk bri bu
 syn keyword vimOption contained	allowrevins arabic autowriteall backupext beval bkc briopt buflisted cedit cink cmdheight columns concealcursor cpt cscopetagorder csverb deco diff dy efm eol et fde fen fileencodings fk foldenable foldnestmax fs gfs gtt guitablabel hid hl im imd imst inde insertmode iskeyword keymodel langnoremap lines lmap luadll makeencoding maxmapdepth menuitems mm modifiable mousem mps nrformats ofu packpath path ph pp printfont pumheight qe relativenumber rightleft rs runtimepath scr sect sft shellredir shiftwidth showmatch signcolumn smarttab sp spf srr startofline suffixes switchbuf ta taglength tbidi termbidi textmode timeout tl tpm ttm ttytype undodir ut vfile virtualedit wc whichwrap wildignorecase winfixheight wiv wrap ws
 syn keyword vimOption contained	altkeymap arabicshape aw backupskip bex bl brk buftype cf cinkeys cmdwinheight com conceallevel crb cscopeverbose cuc def diffexpr ea ei ep eventignore fdi fenc fileformat fkmap foldexpr foldopen fsync gfw guicursor guitabtooltip hidden hlg imactivatefunc imdisable imstatusfunc indentexpr is isp keywordprg langremap linespace lnr lw makeprg maxmem mfd mmd modified mousemodel msm nu omnifunc para pdev pheader preserveindent printheader pvh quoteescape remap rightleftcmd rtp sb scroll sections sh shellslash shm showmode siso smc spc spl ss statusline suffixesadd sws tabline tagrelative tbis termencoding textwidth timeoutlen tm tr tty tw undofile vb vi visualbell wcm wi wildmenu winfixwidth wiw wrapmargin ww
 syn keyword vimOption contained	ambiwidth ari awa balloondelay bexpr bo browsedir casemap cfu cino cmp comments confirm cryptmethod cspc cul define diffopt ead ek equalalways ex fdl fencs fileformats flp foldignore foldtext ft ghr guifont helpfile highlight hls 
+syn keyword vimOption contained splitvertical spv nosplitvertical nospv invsplitvertical invspv
 
 " vimOptions: These are the turn-off setting variants {{{2
 syn keyword vimOption contained	noacd noallowrevins noantialias noarabic noarshape noautoread noaw noballooneval nobinary nobomb nobuflisted nocin noconfirm nocrb nocscopeverbose nocsverb nocursorbind nodeco nodiff noeb noek noendofline noerrorbells noex nofen nofixendofline nofkmap nofsync noguipty nohk nohkp noic noim noimd noinf nois nolangnoremap nolazyredraw nolinebreak nolist noloadplugins nolrm noma nomagic noml nomodeline nomodified nomousef nomousehide nonumber noopendevice nopi nopreviewwindow nopvw norelativenumber norestorescreen nori norl noro noru nosb noscb noscs nosft noshelltemp noshortname noshowfulltag noshowmode nosm nosmartindent nosmd nosol nosplitbelow nospr nossl nostartofline noswapfile nota notagrelative notbi notbs noterse notextmode notgst notimeout noto notr nottybuiltin notx noundofile novisualbell nowarn noweirdinvert nowfw nowildignorecase nowinfixheight nowiv nowrap nowrite nowritebackup
diff --git a/src/buffer.c b/src/buffer.c
--- a/src/buffer.c
+++ b/src/buffer.c
@@ -1582,6 +1582,7 @@ do_buffer(
      */
     if (action == DOBUF_SPLIT)	    /* split window first */
     {
+	int flags = 0;
 	/* If 'switchbuf' contains "useopen": jump to first window containing
 	 * "buf" if one exists */
 	if ((swb_flags & SWB_USEOPEN) && buf_jump_open_win(buf))
@@ -1590,7 +1591,9 @@ do_buffer(
 	 * page containing "buf" if one exists */
 	if ((swb_flags & SWB_USETAB) && buf_jump_open_tab(buf))
 	    return OK;
-	if (win_split(0, 0) == FAIL)
+	if (p_spv)
+	    flags |= WSP_VERT;
+	if (win_split(0, flags) == FAIL)
 	    return FAIL;
     }
 #endif
@@ -2352,10 +2355,12 @@ buflist_getfile(
 	if (wp == NULL && (swb_flags & (SWB_VSPLIT | SWB_SPLIT | SWB_NEWTAB))
 							       && !BUFEMPTY())
 	{
+	    int flags = 0;
+	    if (p_spv || swb_flags & SWB_VSPLIT)
+		flags |= WSP_VERT;
 	    if (swb_flags & SWB_NEWTAB)
 		tabpage_new();
-	    else if (win_split(0, (swb_flags & SWB_VSPLIT) ? WSP_VERT : 0)
-								      == FAIL)
+	    else if (win_split(0, flags) == FAIL)
 		return FAIL;
 	    RESET_BINDING(curwin);
 	}
@@ -5115,9 +5120,13 @@ do_arg_all(
 	{
 	    if (!use_firstwin)		/* split current window */
 	    {
+		int flags = 0;
+		flags = WSP_ROOM | WSP_BELOW;
+		if (p_spv)
+		    flags |= WSP_VERT;
 		p_ea_save = p_ea;
 		p_ea = TRUE;		/* use space from all windows */
-		split_ret = win_split(0, WSP_ROOM | WSP_BELOW);
+		split_ret = win_split(0, flags);
 		p_ea = p_ea_save;
 		if (split_ret == FAIL)
 		    continue;
@@ -5294,15 +5303,18 @@ ex_buffer_all(exarg_T *eap)
 
 	if (wp == NULL && split_ret == OK)
 	{
-#ifdef FEAT_AUTOCMD
+	    int flags = 0;
+	    flags = WSP_ROOM | WSP_BELOW;
 	    bufref_T	bufref;
-
+	    if ((p_spv) && !(cmdmod.split & WSP_HOR))
+		flags |= WSP_VERT;
+#ifdef FEAT_AUTOCMD
 	    set_bufref(&bufref, buf);
 #endif
 	    /* Split the window and put the buffer in it */
 	    p_ea_save = p_ea;
 	    p_ea = TRUE;		/* use space from all windows */
-	    split_ret = win_split(0, WSP_ROOM | WSP_BELOW);
+	    split_ret = win_split(0,flags);
 	    ++open_wins;
 	    p_ea = p_ea_save;
 	    if (split_ret == FAIL)
diff --git a/src/ex_cmds.c b/src/ex_cmds.c
--- a/src/ex_cmds.c
+++ b/src/ex_cmds.c
@@ -6201,7 +6201,10 @@ prepare_tagpreview(
 	    /*
 	     * There is no preview window open yet.  Create one.
 	     */
-	    if (win_split(g_do_tagpreview > 0 ? g_do_tagpreview : 0, 0)
+	    int flags = 0;
+	    if (p_spv)
+		flags |= WSP_VERT;
+	    if (win_split(g_do_tagpreview > 0 ? g_do_tagpreview : 0, flags)
 								      == FAIL)
 		return FALSE;
 	    curwin->w_p_pvw = TRUE;
@@ -6366,6 +6369,8 @@ ex_help(exarg_T *eap)
 	    if (cmdmod.split == 0 && curwin->w_width != Columns
 						  && curwin->w_width < 80)
 		n |= WSP_TOP;
+	    if ((p_spv) && !(cmdmod.split & WSP_HOR))
+		n |= WSP_VERT;
 	    if (win_split(0, n) == FAIL)
 		goto erret;
 
diff --git a/src/ex_cmds.h b/src/ex_cmds.h
--- a/src/ex_cmds.h
+++ b/src/ex_cmds.h
@@ -631,6 +631,9 @@ EX(CMD_hide,		"hide",		ex_hide,
 EX(CMD_history,		"history",	ex_history,
 			EXTRA|TRLBAR|CMDWIN,
 			ADDR_LINES),
+EX(CMD_horizontal,	"horizontal",	ex_wrongmodifier,
+			NEEDARG|EXTRA|NOTRLCOM,
+			ADDR_LINES),
 EX(CMD_insert,		"insert",	ex_append,
 			BANG|RANGE|TRLBAR|CMDWIN|MODIFY,
 			ADDR_LINES),
diff --git a/src/ex_cmds2.c b/src/ex_cmds2.c
--- a/src/ex_cmds2.c
+++ b/src/ex_cmds2.c
@@ -2772,7 +2772,10 @@ do_argfile(exarg_T *eap, int argn)
 	/* split window or create new tab page first */
 	if (*eap->cmd == 's' || cmdmod.tab != 0)
 	{
-	    if (win_split(0, 0) == FAIL)
+	    int flags=0;
+	    if ((p_spv) && !(cmdmod.split & WSP_HOR))
+		flags |= WSP_VERT;
+	    if (win_split(0, flags) == FAIL)
 		return;
 	    RESET_BINDING(curwin);
 	}
diff --git a/src/ex_docmd.c b/src/ex_docmd.c
--- a/src/ex_docmd.c
+++ b/src/ex_docmd.c
@@ -1890,7 +1890,13 @@ do_one_cmd(
 			}
 
 			/* ":hide" and ":hide | cmd" are not modifiers */
-	    case 'h':	if (p != ea.cmd || !checkforcmd(&p, "hide", 3)
+	    case 'h':
+			if (checkforcmd(&ea.cmd, "horizontal", 3))
+			{
+			    cmdmod.split |= WSP_HOR;
+			    continue;
+			}
+			if (p != ea.cmd || !checkforcmd(&p, "hide", 3)
 					       || *p == NUL || ends_excmd(*p))
 			    break;
 			ea.cmd = p;
@@ -2796,6 +2802,7 @@ do_one_cmd(
 	    case CMD_filter:
 	    case CMD_help:
 	    case CMD_hide:
+	    case CMD_horizontal:
 	    case CMD_ijump:
 	    case CMD_ilist:
 	    case CMD_isearch:
@@ -3321,6 +3328,7 @@ static struct cmdmod
     {"confirm", 4, FALSE},
     {"filter", 4, FALSE},
     {"hide", 3, FALSE},
+    {"horizontal", 3, FALSE},
     {"keepalt", 5, FALSE},
     {"keepjumps", 5, FALSE},
     {"keepmarks", 3, FALSE},
@@ -3833,6 +3841,7 @@ set_one_cmd_context(
 	case CMD_folddoclosed:
 	case CMD_folddoopen:
 	case CMD_hide:
+	case CMD_horizontal:
 	case CMD_keepalt:
 	case CMD_keepjumps:
 	case CMD_keepmarks:
@@ -7913,7 +7922,10 @@ handle_drop(
     }
     if (split)
     {
-	if (win_split(0, 0) == FAIL)
+	int flags = 0;
+	if ((p_spv) && !(cmdmod.split & WSP_HOR))
+	    flags |= WSP_VERT;
+	if (win_split(0, flags) == FAIL)
 	    return;
 	RESET_BINDING(curwin);
 
@@ -8276,7 +8288,8 @@ ex_splitview(exarg_T *eap)
 	}
     }
     else if (win_split(eap->addr_count > 0 ? (int)eap->line2 : 0,
-				     *eap->cmd == 'v' ? WSP_VERT : 0) != FAIL)
+	    ( (*eap->cmd == 'v'  ||  p_spv) && !(cmdmod.split & WSP_HOR))
+	    ? WSP_VERT : 0) != FAIL)
     {
 # ifdef FEAT_SCROLLBIND
 	/* Reset 'scrollbind' when editing another file, but keep it when
@@ -11239,6 +11252,8 @@ makeopens(
 	    return FAIL;
 	if (!p_spr && put_line(fd, "set nosplitright") == FAIL)
 	    return FAIL;
+	if (!p_spv && put_line(fd, "set novertical") == FAIL)
+	    return FAIL;
 
 	/*
 	 * Check if window sizes can be restored (no windows omitted).
diff --git a/src/if_cscope.c b/src/if_cscope.c
--- a/src/if_cscope.c
+++ b/src/if_cscope.c
@@ -1242,6 +1242,8 @@ cs_find_common(
 	    {
 		if (postponed_split != 0)
 		{
+		    if ((p_spv) && !(cmdmod.split & WSP_HOR))
+			postponed_split_flags |= WSP_VERT;
 		    (void)win_split(postponed_split > 0 ? postponed_split : 0,
 						       postponed_split_flags);
 		    RESET_BINDING(curwin);
diff --git a/src/option.c b/src/option.c
--- a/src/option.c
+++ b/src/option.c
@@ -2626,6 +2626,9 @@ static struct vimoption options[] =
     {"splitright",  "spr",  P_BOOL|P_VI_DEF,
 			    (char_u *)&p_spr, PV_NONE,
 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
+    {"splitvertical",  "spv",  P_BOOL|P_VI_DEF,
+			    (char_u *)&p_spv, PV_NONE,
+			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
     {"startofline", "sol",  P_BOOL|P_VI_DEF|P_VIM,
 			    (char_u *)&p_sol, PV_NONE,
 			    {(char_u *)TRUE, (char_u *)0L} SCRIPTID_INIT},
diff --git a/src/option.h b/src/option.h
--- a/src/option.h
+++ b/src/option.h
@@ -810,6 +810,7 @@ EXTERN char_u	*p_tal;		/* 'tabline' */
 EXTERN char_u	*p_sps;		/* 'spellsuggest' */
 #endif
 EXTERN int	p_spr;		/* 'splitright' */
+EXTERN int	p_spv;		/* 'splitvertical' */
 EXTERN int	p_sol;		/* 'startofline' */
 EXTERN char_u	*p_su;		/* 'suffixes' */
 EXTERN char_u	*p_sws;		/* 'swapsync' */
diff --git a/src/quickfix.c b/src/quickfix.c
--- a/src/quickfix.c
+++ b/src/quickfix.c
@@ -2148,6 +2148,8 @@ jump_to_help_window(qf_info_T *qi, int *opened_window)
 	if (cmdmod.split == 0 && curwin->w_width != Columns
 		&& curwin->w_width < 80)
 	    flags |= WSP_TOP;
+	if ((p_spv) && !(cmdmod.split & WSP_HOR))
+	    flags |= WSP_VERT;
 	if (qi != &ql_info)
 	    flags |= WSP_NEWLOC;  /* don't copy the location list */
 
@@ -2242,6 +2244,8 @@ win_found:
     if ((ONE_WINDOW && bt_quickfix(curbuf)) || !usable_win)
     {
 	flags = WSP_ABOVE;
+	if ((p_spv) && !(cmdmod.split & WSP_HOR))
+	    flags |= WSP_VERT;
 	if (ll_ref != NULL)
 	    flags |= WSP_NEWLOC;
 	if (win_split(0, flags) == FAIL)
diff --git a/src/search.c b/src/search.c
--- a/src/search.c
+++ b/src/search.c
@@ -5459,7 +5459,10 @@ search_line:
 #endif
 		    if (action == ACTION_SPLIT)
 		    {
-			if (win_split(0, 0) == FAIL)
+			int flags = 0;
+			if ((p_spv) && !(cmdmod.split & WSP_HOR))
+			    flags |= WSP_VERT;
+			if (win_split(0, flags) == FAIL)
 			    break;
 			RESET_BINDING(curwin);
 		    }
diff --git a/src/tag.c b/src/tag.c
--- a/src/tag.c
+++ b/src/tag.c
@@ -3251,6 +3251,8 @@ jumpto_tag(
     if (getfile_result == GETFILE_UNUSED
 				       && (postponed_split || cmdmod.tab != 0))
     {
+	if ((p_spv) && !(cmdmod.split & WSP_HOR))
+	    postponed_split_flags |= WSP_VERT;
 	if (win_split(postponed_split > 0 ? postponed_split : 0,
 						postponed_split_flags) == FAIL)
 	{
diff --git a/src/vim.h b/src/vim.h
--- a/src/vim.h
+++ b/src/vim.h
@@ -1184,6 +1184,7 @@ typedef struct {
 #define WSP_BELOW	32	/* put new window below/right */
 #define WSP_ABOVE	64	/* put new window above/left */
 #define WSP_NEWLOC	128	/* don't copy location list */
+#define WSP_HOR		256	/* split horizontally */
 
 /*
  * arguments for gui_set_shellsize()
diff --git a/src/window.c b/src/window.c
--- a/src/window.c
+++ b/src/window.c
@@ -92,6 +92,7 @@ do_window(
     int		len;
 #endif
     char_u	cbuf[40];
+    int flags=0;
 
     if (Prenum == 0)
 	Prenum1 = 1;
@@ -121,7 +122,9 @@ do_window(
 #ifdef FEAT_GUI
 		need_mouse_correct = TRUE;
 #endif
-		(void)win_split((int)Prenum, 0);
+		if ((p_spv) && !(cmdmod.split & WSP_HOR))
+		    flags |= WSP_VERT;
+		(void)win_split((int)Prenum, flags);
 		break;
 
 /* split current window in two parts, vertically */
@@ -138,7 +141,9 @@ do_window(
 #ifdef FEAT_GUI
 		need_mouse_correct = TRUE;
 #endif
-		(void)win_split((int)Prenum, WSP_VERT);
+		if (!(cmdmod.split & WSP_HOR))
+		    flags |= WSP_VERT;
+		(void)win_split((int)Prenum, flags);
 		break;
 
 /* split current window and edit alternate file */
@@ -466,11 +471,14 @@ wingotofile:
 		{
 		    tabpage_T	*oldtab = curtab;
 		    win_T	*oldwin = curwin;
+		    int		flags = 0;
 # ifdef FEAT_GUI
 		    need_mouse_correct = TRUE;
 # endif
 		    setpcmark();
-		    if (win_split(0, 0) == OK)
+		    if ((p_spv) && !(cmdmod.split & WSP_HOR))
+			flags |= WSP_VERT;
+		    if (win_split(0, flags) == OK)
 		    {
 			RESET_BINDING(curwin);
 			if (do_ecmd(0, ptr, NULL, NULL, ECMD_LASTL,
@@ -728,6 +736,11 @@ win_split(int size, int flags)
 
     /* Add flags from ":vertical", ":topleft" and ":botright". */
     flags |= cmdmod.split;
+    if ((flags & WSP_HOR) && (flags & WSP_VERT))
+    {
+	EMSG(_("E442: Can't split vertical and horizontal at the same time"));
+	return FAIL;
+    }
     if ((flags & WSP_TOP) && (flags & WSP_BOT))
     {
 	EMSG(_("E442: Can't split topleft and botright at the same time"));
