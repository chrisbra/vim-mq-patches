# HG changeset patch
# Parent aedfce40d290591677997f19c80b32e0a0484150

diff --git a/runtime/doc/eval.txt b/runtime/doc/eval.txt
--- a/runtime/doc/eval.txt
+++ b/runtime/doc/eval.txt
@@ -4279,8 +4279,8 @@
 							*getpos()*
 getpos({expr})	Get the position for {expr}.  For possible values of {expr}
 		see |line()|.
-		The result is a |List| with four numbers:
-		    [bufnum, lnum, col, off]
+		The result is a |List| with five numbers:
+		    [bufnum, lnum, col, off, curswant]
 		"bufnum" is zero, unless a mark like '0 or 'A is used, then it
 		is the buffer number of the mark.
 		"lnum" and "col" are the position in the buffer.  The first
@@ -4289,6 +4289,7 @@
 		it is the offset in screen columns from the start of the
 		character.  E.g., a position within a <Tab> or after the last
 		character.
+		"curswant" is the prefered column for vertical movement.
 		This can be used to save and restore the cursor position: >
 			let save_cursor = getpos(".")
 			MoveTheCursorAround
@@ -5022,8 +5023,8 @@
 			.	the cursor
 			'x	mark x
 
-		{list} must be a |List| with four numbers:
-		    [bufnum, lnum, col, off]
+		{list} must be a |List| with five numbers:
+		    [bufnum, lnum, col, off, curswant]
 
 		"bufnum" is the buffer number.	Zero can be used for the
 		current buffer.  Setting the cursor is only possible for
@@ -5041,13 +5042,14 @@
 		character.  E.g., a position within a <Tab> or after the last
 		character.
 
+		The "curswant" number is optionally and only used when setting
+		the position of the cursor and restores the prefered column
+		for moving vertically.
+
 		Returns 0 when the position could be set, -1 otherwise.
 		An error message is given if {expr} is invalid.
 
-		Also see |getpos()|
-
-		This does not restore the preferred column for moving
-		vertically.  See |winrestview()| for that.
+		Also see |getpos()| and |winrestview()|
 
 
 setqflist({list} [, {action}])				*setqflist()*
diff --git a/src/eval.c b/src/eval.c
--- a/src/eval.c
+++ b/src/eval.c
@@ -11354,6 +11354,8 @@
 				(fp != NULL) ? (varnumber_T)fp->coladd :
 #endif
 							      (varnumber_T)0);
+	update_curswant();
+	list_append_number(l, (fp != NULL) ? (long)curwin->w_curswant : 0);
     }
     else
 	rettv->vval.v_number = FALSE;
@@ -18391,13 +18393,14 @@
     list_T	*l = arg->vval.v_list;
     long	i = 0;
     long	n;
+    int         cwin = FALSE;
 
     /* List must be: [fnum, lnum, col, coladd], where "fnum" is only there
      * when "fnump" isn't NULL and "coladd" is optional. */
     if (arg->v_type != VAR_LIST
 	    || l == NULL
 	    || l->lv_len < (fnump == NULL ? 2 : 3)
-	    || l->lv_len > (fnump == NULL ? 3 : 4))
+	    || l->lv_len > (fnump == NULL ? 4 : 5))
 	return FAIL;
 
     if (fnump != NULL)
@@ -18406,7 +18409,10 @@
 	if (n < 0)
 	    return FAIL;
 	if (n == 0)
+	{
 	    n = curbuf->b_fnum;		/* current buffer */
+	    cwin = TRUE;
+	}
 	*fnump = n;
     }
 
@@ -18421,13 +18427,20 @@
     posp->col = n;
 
 #ifdef FEAT_VIRTUALEDIT
-    n = list_find_nr(l, i, NULL);
+    n = list_find_nr(l, i++, NULL);
     if (n < 0)
 	posp->coladd = 0;
     else
 	posp->coladd = n;
 #endif
 
+    n = list_find_nr(l, i, NULL); /* curswant */
+    if (cwin)
+    {
+	curwin->w_curswant = (n<0) ? 0 : n;
+	curwin->w_set_curswant = FALSE;
+    }
+
     return OK;
 }
 
