This patch adds an additional left margin between the number column
and the text, so that the text does not look to squashed to the left margin.

Repository: https://github.com/chrisbra/vim-mq-patches/blob/master/normal_text_shift
diff --git a/runtime/doc/options.txt b/runtime/doc/options.txt
index b4ee71751..41cbb5a08 100644
--- a/runtime/doc/options.txt
+++ b/runtime/doc/options.txt
@@ -4803,6 +4803,14 @@ A jump table for the options with a short description can be found at |Q_op|.
 	typed.  Also, updating the window title is postponed.  To force an
 	update use |:redraw|.
 
+						'leftmargin' 'lem'
+'leftmargin' 'lem'	number (default: 0)
+			{not in Vi}
+	Additional amount of space that will be inserted after the number
+	column has been drawn. Will make the text shift by that many 
+	chars.
+
+
 			*'linebreak'* *'lbr'* *'nolinebreak'* *'nolbr'*
 'linebreak' 'lbr'	boolean	(default off)
 			local to window
diff --git a/src/move.c b/src/move.c
index f058b7310..19238aade 100644
--- a/src/move.c
+++ b/src/move.c
@@ -890,7 +890,7 @@ win_col_off(win_T *wp)
 #ifdef FEAT_SIGNS
 	    + (signcolumn_on(wp) ? 2 : 0)
 #endif
-	   );
+	    + p_lem);
 }
 
     int
diff --git a/src/option.c b/src/option.c
index d4f72755d..4a8b5e2a5 100644
--- a/src/option.c
+++ b/src/option.c
@@ -1820,6 +1820,9 @@ static struct vimoption options[] =
     {"lazyredraw",  "lz",   P_BOOL|P_VI_DEF,
 			    (char_u *)&p_lz, PV_NONE,
 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
+    {"leftmargin", "lem",   P_NUM|P_VIM|P_RWIN,
+			    (char_u *)&p_lem, PV_NONE,
+			    {(char_u *)0L, (char_u *)0L} SCRIPTID_INIT},
     {"linebreak",   "lbr",  P_BOOL|P_VI_DEF|P_RWIN,
 #ifdef FEAT_LINEBREAK
 			    (char_u *)VAR_WIN, PV_LBR,
diff --git a/src/option.h b/src/option.h
index 2c6aeef03..8c149970d 100644
--- a/src/option.h
+++ b/src/option.h
@@ -620,6 +620,7 @@ EXTERN long	p_ls;		/* 'laststatus' */
 EXTERN long	p_stal;		/* 'showtabline' */
 #endif
 EXTERN char_u	*p_lcs;		/* 'listchars' */
+EXTERN long	p_lem;		/* 'leftmargin' */
 
 EXTERN int	p_lz;		/* 'lazyredraw' */
 EXTERN int	p_lpl;		/* 'loadplugins' */
diff --git a/src/screen.c b/src/screen.c
index 8ab708e49..5b141d993 100644
--- a/src/screen.c
+++ b/src/screen.c
@@ -1127,6 +1127,7 @@ win_update(win_T *wp)
     /* Force redraw when width of 'number' or 'relativenumber' column
      * changes. */
     i = (wp->w_p_nu || wp->w_p_rnu) ? number_width(wp) : 0;
+    i += p_lem;
     if (wp->w_nrwidth != i)
     {
 	type = NOT_VALID;
@@ -2495,7 +2496,7 @@ fold_line(
 	    else
 # endif
 		copy_text_attr(off + col, (char_u *)"  ", len, HL_ATTR(HLF_FL));
-	    col += len;
+	    col += len + p_lem;
 	}
     }
 #endif
@@ -3048,10 +3049,11 @@ win_line(
 # define WL_SIGN	WL_FOLD		/* column for signs */
 #endif
 #define WL_NR		WL_SIGN + 1	/* line number */
+#define WL_NR_SKIP      WL_NR + 1       /* leftmargin */
 #ifdef FEAT_LINEBREAK
-# define WL_BRI		WL_NR + 1	/* 'breakindent' */
+# define WL_BRI		WL_NR_SKIP + 1	/* 'breakindent' */
 #else
-# define WL_BRI		WL_NR
+# define WL_BRI		WL_NR_SKIP
 #endif
 #if defined(FEAT_LINEBREAK) || defined(FEAT_DIFF)
 # define WL_SBR		WL_BRI + 1	/* 'showbreak' or 'diff' */
@@ -3788,6 +3790,15 @@ win_line(
 		}
 	    }
 
+	    if (draw_state == WL_NR_SKIP - 1 && n_extra == 0 && p_lem > 0)
+	    {
+		draw_state = WL_NR_SKIP;
+		c_extra = ' ';
+		p_extra = NULL;
+		n_extra = p_lem;
+		char_attr = 0;
+	    }
+
 #ifdef FEAT_LINEBREAK
 	    if (wp->w_p_brisbr && draw_state == WL_BRI - 1
 					     && n_extra == 0 && *p_sbr != NUL)
@@ -5097,7 +5108,7 @@ win_line(
 #ifdef FEAT_DIFF
 		&& filler_todo <= 0
 #endif
-		&& draw_state > WL_NR
+		&& draw_state > WL_NR_SKIP
 		&& c != NUL)
 	{
 	    c = lcs_prec;
@@ -5489,7 +5500,7 @@ win_line(
 		else
 		    /* DBCS: Put second byte in the second screen char. */
 		    ScreenLines[off] = mb_c & 0xff;
-		if (draw_state > WL_NR
+		if (draw_state > WL_NR_SKIP
 #ifdef FEAT_DIFF
 			&& filler_todo <= 0
 #endif
@@ -5613,7 +5624,7 @@ win_line(
 
 	/* Only advance the "vcol" when after the 'number' or 'relativenumber'
 	 * column. */
-	if (draw_state > WL_NR
+	if (draw_state > WL_NR_SKIP
 #ifdef FEAT_DIFF
 		&& filler_todo <= 0
 #endif
