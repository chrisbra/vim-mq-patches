From 4e3aa0a5dab96d2799567622f3f537e357aa479e Mon Sep 17 00:00:00 2001
From: "Andy K. Massimino" <massimino@gatech.edu>
Date: Thu, 7 Feb 2019 13:46:37 -0500
Subject: [PATCH] Tagfunc patch, updated
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Update for 8.1.0940
Update to accommodate new internal tag format since 8.0.0195

From 47ac4af73d734bdb08d7f5171584b6b3b4318e61 Mon Sep 17 00:00:00 2001
From: Christian Brabandt <cb@256bit.org>
Date: Tue, 13 Dec 2016 22:28:09 +0100
Subject: [PATCH] Add tagfunc feature
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This commit adds the tagfunc feature from the old vim_extended
repository.

,----[ :h 'tagfunc' ]-
| 							*'tagfunc'* *'tfu'*
| 'tagfunc' 'tfu'		string	(default: empty)
| 			local to buffer
| 			{not in Vi}
| 			{not available when compiled without the +eval
| 			or +insert_expand feature}
| 	This option specifies a function to be used to perform tag searches.
| 	The function should take two parameters, the first of which is the
| 	pattern to be searched, while the second is a set of flags which may
| 	be used by the function to decide on its behaviour. Currently the
| 	following flags may appear:
| 		'c' - indicates that the context around the cursor position
| 		      can be used to generate more accurate results,
| 		'i' - the function is being called during insert-mode
| 		      completion.
| 	See |tag-function| for an explanation of what the function should
| 	return and an example of such a function.
`----

Repository:
https://github.com/chrisbra/vim-mq-patches
git://github.com/chrisbra/vim-mq-patches.git

Filename:
tagfunc

Latest update for:
vim-8.1.0940

Bug reports:
http://www.vim.org/maillist.php

License & Copyright:
Â© 2010 Robert Webb, Lech Lorens, C.Brabandt, A.Massimino
---
 runtime/doc/options.txt |  18 ++++
 runtime/doc/tagsrch.txt |  54 ++++++++++
 runtime/optwin.vim      |   3 +
 src/buffer.c            |   1 +
 src/dict.c              |  52 +++++++++
 src/edit.c              |   2 +
 src/ex_cmds.c           |   2 +-
 src/globals.h           |   3 +
 src/normal.c            |   4 +
 src/option.c            |  16 +++
 src/option.h            |   3 +
 src/proto/dict.pro      |   2 +
 src/structs.h           |  11 ++
 src/tag.c               | 232 +++++++++++++++++++++++++++++++++++++++-
 src/vim.h               |   1 +
 15 files changed, 399 insertions(+), 5 deletions(-)

diff --git a/runtime/doc/options.txt b/runtime/doc/options.txt
index e664c96217..b99d8fa76b 100644
--- a/runtime/doc/options.txt
+++ b/runtime/doc/options.txt
@@ -7891,6 +7891,24 @@ A jump table for the options with a short description can be found at |Q_op|.
 	NOTE: This option is set to the Vi default value when 'compatible' is
 	set and to the Vim default value when 'compatible' is reset.
 
+							*'tagfunc'* *'tfu'*
+'tagfunc' 'tfu'		string	(default: empty)
+			local to buffer
+			{not in Vi}
+			{not available when compiled without the +eval
+			or +insert_expand feature}
+	This option specifies a function to be used to perform tag searches.
+	The function should take two parameters, the first of which is the
+	pattern to be searched, while the second is a set of flags which may
+	be used by the function to decide on its behaviour. Currently the
+	following flags may appear:
+		'c' - indicates that the context around the cursor position
+		      can be used to generate more accurate results,
+		'i' - the function is being called during insert-mode
+		      completion.
+	See |tag-function| for an explanation of what the function should
+	return and an example of such a function.
+
 						*'taglength'* *'tl'*
 'taglength' 'tl'	number	(default 0)
 			global
diff --git a/runtime/doc/tagsrch.txt b/runtime/doc/tagsrch.txt
index f9cc1efdc0..b644939b55 100644
--- a/runtime/doc/tagsrch.txt
+++ b/runtime/doc/tagsrch.txt
@@ -14,6 +14,7 @@ See section |29.1| of the user manual for an introduction.
 4. Tags details			|tag-details|
 5. Tags file format		|tags-file-format|
 6. Include file searches	|include-search|
+7. Programmable tag search	|tag-function|
 
 ==============================================================================
 1. Jump to a tag					*tag-commands*
@@ -864,4 +865,57 @@ Common arguments for the commands above:
 <	For a ":djump", ":dsplit", ":dlist" and ":dsearch" command the pattern
 	is used as a literal string, not as a search pattern.
 
+==============================================================================
+7. Programmable tag search					*tag-function*
+
+It is possible to provide Vim with a script which will generate a list of tags
+used for commands like |:tag|, |:tselect| and normal mode commands like
+|CTRL-]|. The Vim script function used for generating the taglist is specified
+by setting the 'tagfunc' option. The function will be called with two
+arguments:
+   a:pattern - the tag identifier used during the tag search,
+   a:flags   - a list of flags to control the function behaviour.
+
+Currently the only flag that may be passed to the tag function is 'c' which
+indicates that the function was invoked due to a normal command being
+processed (mnemonic: the tag function may use the Context around the cursor to
+perform a better job of generating the tag list.
+
+Note that when 'tagfunc' is set, the priority of the tags described in
+|tag-priority| does not apply. Instead, the priority is exactly as the
+ordering of the elements in the list returned by the function.
+
+The function should return a list of dictionaries. Each of the dictionaries
+must at least include the following entries:
+	name		Name of the tag.
+	filename	Name of the file where the tag is
+			defined.  It is either relative to the
+			current directory or a full path.
+	cmd		Ex command used to locate the tag in the file. This
+			can be either an ex search pattern, a line number or
+			a line number followed by a byte number.
+Note that the format of the result is similar to that of |taglist()|,
+which makes it possible to use its output to generate the result.
+
+
+The following is a hypothetical example of a function used for 'tagfunc'. It
+uses the output of |taglist()| to generate the result: a list of tags in the
+inverse order of file names.
+
+>
+	function! TagFunc(pattern, flags)
+	  function! CompareFilenames(item1, item2)
+	    let f1 = a:item1['filename']
+	    let f2 = a:item2['filename']
+	    return f1 >=# f2 ?
+			\ -1 : f1 <=# f2 ? 1 : 0
+	  endfunction
+
+	  let result = taglist(a:pattern)
+	  call sort(result, "CompareFilenames")
+
+	  return result
+	endfunc
+	set tagfunc=TagFunc
+<
  vim:tw=78:ts=8:noet:ft=help:norl:
diff --git a/runtime/optwin.vim b/runtime/optwin.vim
index d929836e74..3c0d178c30 100644
--- a/runtime/optwin.vim
+++ b/runtime/optwin.vim
@@ -300,6 +300,9 @@ call append("$", "tagstack\ta :tag command will use the tagstack")
 call <SID>BinOptionG("tgst", &tgst)
 call append("$", "showfulltag\twhen completing tags in Insert mode show more info")
 call <SID>BinOptionG("sft", &sft)
+call append("$", "tagfunc\ta function to be used to peform tag searches")
+call append("$", "\t(local to buffer)")
+call <SID>OptionL("tagfunc")
 if has("cscope")
   call append("$", "cscopeprg\tcommand for executing cscope")
   call <SID>OptionG("csprg", &csprg)
diff --git a/src/buffer.c b/src/buffer.c
index 49d38ed31d..28955feba4 100644
--- a/src/buffer.c
+++ b/src/buffer.c
@@ -2212,6 +2212,7 @@ free_buf_options(
 #ifdef FEAT_COMPL_FUNC
     clear_string_option(&buf->b_p_cfu);
     clear_string_option(&buf->b_p_ofu);
+    clear_string_option(&buf->b_p_tfu);
 #endif
 #ifdef FEAT_QUICKFIX
     clear_string_option(&buf->b_p_gp);
diff --git a/src/dict.c b/src/dict.c
index 0bb9dfa875..5aaf738965 100644
--- a/src/dict.c
+++ b/src/dict.c
@@ -428,6 +428,58 @@ dict_add_list(dict_T *d, char *key, list_T *list)
     return OK;
 }
 
+/* Initializes a data structure used for iterating over dictionary items in
+ * dict_iterate_next().
+ */
+    void
+dict_iterate_start(typval_T *argvars, struct dict_iterator_S *iter)
+{
+    dict_T	*d;
+
+    if (argvars[0].v_type != VAR_DICT)
+    {
+	iter->items = 0;
+	return;
+    }
+
+    if ((d = argvars[0].vval.v_dict) == NULL)
+    {
+	iter->items = 0;
+	return;
+    }
+
+    iter->items = (int)d->dv_hashtab.ht_used;
+    iter->hi = d->dv_hashtab.ht_array;
+}
+
+/* Allows iterating over the items stored in a dictionary.
+ * Returns the pointer to the key, *tv_result is set to point to the value
+ * for that key.
+ * If there are no more items, NULL is returned.
+ * iter should be initialized with dict_iterate_start() before calling this
+ * function for the first time.
+ */
+    char_u*
+dict_iterate_next(struct dict_iterator_S *iter, typval_T **tv_result)
+{
+    dictitem_T	*di;
+    char_u      *result;
+
+    if (iter->items <= 0)
+	return NULL;
+
+    while (HASHITEM_EMPTY(iter->hi))
+	++iter->hi;
+
+    di = HI2DI(iter->hi);
+    result = di->di_key;
+    *tv_result = &di->di_tv;
+
+    --iter->items;
+    ++iter->hi;
+    return result;
+}
+
 /*
  * Add a dict entry to dictionary "d".
  * Returns FAIL when out of memory and when key already exists.
diff --git a/src/edit.c b/src/edit.c
index 62ff03d962..45932101ad 100644
--- a/src/edit.c
+++ b/src/edit.c
@@ -4519,6 +4519,7 @@ ins_compl_get_exp(pos_T *ini)
 
 	    /* Find up to TAG_MANY matches.  Avoids that an enormous number
 	     * of matches is found when compl_pattern is empty */
+	    g_tag_at_cursor = 1;
 	    if (find_tags(compl_pattern, &num_matches, &matches,
 		    TAG_REGEXP | TAG_NAMES | TAG_NOIC | TAG_INS_COMP
 		    | (ctrl_x_mode != CTRL_X_NORMAL ? TAG_VERBOSE : 0),
@@ -4526,6 +4527,7 @@ ins_compl_get_exp(pos_T *ini)
 	    {
 		ins_compl_add_matches(num_matches, matches, p_ic);
 	    }
+	    g_tag_at_cursor = 0;
 	    p_ic = save_p_ic;
 	    break;
 
diff --git a/src/ex_cmds.c b/src/ex_cmds.c
index 79b9bc11d4..67d369d0ec 100644
--- a/src/ex_cmds.c
+++ b/src/ex_cmds.c
@@ -6790,7 +6790,7 @@ find_help_tags(
 
     *matches = (char_u **)"";
     *num_matches = 0;
-    flags = TAG_HELP | TAG_REGEXP | TAG_NAMES | TAG_VERBOSE;
+    flags = TAG_HELP | TAG_REGEXP | TAG_NAMES | TAG_VERBOSE | TAG_NO_TFU;
     if (keep_lang)
 	flags |= TAG_KEEP_LANG;
     if (find_tags(IObuff, num_matches, matches, flags, (int)MAXCOL, NULL) == OK
diff --git a/src/globals.h b/src/globals.h
index 82e663e9c6..c1ad5570d9 100644
--- a/src/globals.h
+++ b/src/globals.h
@@ -1077,6 +1077,9 @@ EXTERN int	postponed_split_tab INIT(= 0);  /* cmdmod.tab */
 EXTERN int	g_do_tagpreview INIT(= 0);  /* for tag preview commands:
 					       height of preview window */
 #endif
+EXTERN int	g_tag_at_cursor INIT(= 0);  /* whether the tag command comes
+					       from the command line (0) or was
+					       invoked as a normal command (1) */
 EXTERN int	replace_offset INIT(= 0);   /* offset for replace_push() */
 
 EXTERN char_u	*escape_chars INIT(= (char_u *)" \t\\\"|");
diff --git a/src/normal.c b/src/normal.c
index ca0d8ff876..6f43fd8dc1 100644
--- a/src/normal.c
+++ b/src/normal.c
@@ -5731,7 +5731,11 @@ nv_ident(cmdarg_T *cap)
 	(void)normal_search(cap, cmdchar == '*' ? '/' : '?', buf, 0);
     }
     else
+    {
+	g_tag_at_cursor = 1;
 	do_cmdline_cmd(buf);
+	g_tag_at_cursor = 0;
+    }
 
     vim_free(buf);
 }
diff --git a/src/option.c b/src/option.c
index eec8fe0520..94e3c41376 100644
--- a/src/option.c
+++ b/src/option.c
@@ -167,6 +167,9 @@
 #endif
 #define PV_SW		OPT_BUF(BV_SW)
 #define PV_SWF		OPT_BUF(BV_SWF)
+#ifdef FEAT_COMPL_FUNC
+# define PV_TFU		OPT_BUF(BV_TFU)
+#endif
 #define PV_TAGS		OPT_BOTH(OPT_BUF(BV_TAGS))
 #define PV_TC		OPT_BOTH(OPT_BUF(BV_TC))
 #define PV_TS		OPT_BUF(BV_TS)
@@ -302,6 +305,7 @@ static char_u	*p_cpt;
 #ifdef FEAT_COMPL_FUNC
 static char_u	*p_cfu;
 static char_u	*p_ofu;
+static char_u	*p_tfu;
 #endif
 static int	p_eol;
 static int	p_fixeol;
@@ -2642,6 +2646,15 @@ static struct vimoption options[] =
     {"tagcase",	    "tc",   P_STRING|P_VIM,
 			    (char_u *)&p_tc, PV_TC,
 			    {(char_u *)"followic", (char_u *)"followic"} SCTX_INIT},
+    {"tagfunc",    "tfu",   P_STRING|P_ALLOCED|P_VI_DEF|P_SECURE,
+#ifdef FEAT_COMPL_FUNC
+			    (char_u *)&p_tfu, PV_TFU,
+			    {(char_u *)"", (char_u *)0L}
+#else
+			    (char_u *)NULL, PV_NONE,
+			    {(char_u *)0L, (char_u *)0L}
+#endif
+			    SCTX_INIT},
     {"taglength",   "tl",   P_NUM|P_VI_DEF,
 			    (char_u *)&p_tl, PV_NONE,
 			    {(char_u *)0L, (char_u *)0L} SCTX_INIT},
@@ -5690,6 +5703,7 @@ check_buf_options(buf_T *buf)
 #ifdef FEAT_COMPL_FUNC
     check_string_option(&buf->b_p_cfu);
     check_string_option(&buf->b_p_ofu);
+    check_string_option(&buf->b_p_tfu);
 #endif
 #ifdef FEAT_KEYMAP
     check_string_option(&buf->b_p_keymap);
@@ -10907,6 +10921,7 @@ get_varp(struct vimoption *p)
 #ifdef FEAT_COMPL_FUNC
 	case PV_CFU:	return (char_u *)&(curbuf->b_p_cfu);
 	case PV_OFU:	return (char_u *)&(curbuf->b_p_ofu);
+	case PV_TFU:	return (char_u *)&(curbuf->b_p_tfu);
 #endif
 	case PV_EOL:	return (char_u *)&(curbuf->b_p_eol);
 	case PV_FIXEOL:	return (char_u *)&(curbuf->b_p_fixeol);
@@ -11295,6 +11310,7 @@ buf_copy_options(buf_T *buf, int flags)
 #ifdef FEAT_COMPL_FUNC
 	    buf->b_p_cfu = vim_strsave(p_cfu);
 	    buf->b_p_ofu = vim_strsave(p_ofu);
+	    buf->b_p_tfu = vim_strsave(p_tfu);
 #endif
 	    buf->b_p_sts = p_sts;
 	    buf->b_p_sts_nopaste = p_sts_nopaste;
diff --git a/src/option.h b/src/option.h
index 2f1d322bf1..b2233ed878 100644
--- a/src/option.h
+++ b/src/option.h
@@ -1072,6 +1072,9 @@ enum
 #endif
     , BV_SW
     , BV_SWF
+#ifdef FEAT_COMPL_FUNC
+    , BV_TFU
+#endif
     , BV_TAGS
     , BV_TC
     , BV_TS
diff --git a/src/proto/dict.pro b/src/proto/dict.pro
index b09a647bd4..11002097ce 100644
--- a/src/proto/dict.pro
+++ b/src/proto/dict.pro
@@ -17,6 +17,8 @@ int dict_add_number(dict_T *d, char *key, varnumber_T nr);
 int dict_add_string(dict_T *d, char *key, char_u *str);
 int dict_add_string_len(dict_T *d, char *key, char_u *str, int len);
 int dict_add_list(dict_T *d, char *key, list_T *list);
+void dict_iterate_start(typval_T *argvars, struct dict_iterator_S *iter);
+char_u *dict_iterate_next(struct dict_iterator_S *iter, typval_T **tv_result);
 int dict_add_dict(dict_T *d, char *key, dict_T *dict);
 long dict_len(dict_T *d);
 dictitem_T *dict_find(dict_T *d, char_u *key, int len);
diff --git a/src/structs.h b/src/structs.h
index fdef811e47..a3bface244 100644
--- a/src/structs.h
+++ b/src/structs.h
@@ -1884,6 +1884,16 @@ typedef struct list_stack_S
     struct list_stack_S	*prev;
 } list_stack_T;
 
+/*
+ * Structure used for iterating over dictionary items.
+ * Initialize with dict_iterate_start().
+ */
+struct dict_iterator_S
+{
+    int         items;
+    hashitem_T	*hi;
+};
+
 /* values for b_syn_spell: what to do with toplevel text */
 #define SYNSPL_DEFAULT	0	/* spell check if @Spell not defined */
 #define SYNSPL_TOP	1	/* spell check toplevel text */
@@ -2245,6 +2255,7 @@ struct file_buffer
 #ifdef FEAT_COMPL_FUNC
     char_u	*b_p_cfu;	/* 'completefunc' */
     char_u	*b_p_ofu;	/* 'omnifunc' */
+    char_u	*b_p_tfu;	/* 'tagfunc' */
 #endif
     int		b_p_eol;	/* 'endofline' */
     int		b_p_fixeol;	/* 'fixendofline' */
diff --git a/src/tag.c b/src/tag.c
index 9dde6a9e2b..9029b72cf3 100644
--- a/src/tag.c
+++ b/src/tag.c
@@ -26,7 +26,8 @@ typedef struct tag_pointers
     char_u	*command;	/* first char of command */
     /* filled in by parse_match(): */
     char_u	*command_end;	/* first char after command */
-    char_u	*tag_fname;	/* file name of the tags file */
+    char_u	*tag_fname;	/* file name of the tags file. This is used
+				 * when 'tr' is set. */
 #ifdef FEAT_EMACS_TAGS
     int		is_etag;	/* TRUE for emacs tag */
 #endif
@@ -88,6 +89,9 @@ static char_u	*tagmatchname = NULL;	/* name of last used tag */
 static taggy_T ptag_entry = {NULL, {{0, 0, 0}, 0}, 0, 0};
 #endif
 
+/* Used instead of NUL to separate tag fields in the growarrays. */
+#define TAG_SEP 0x02
+
 /*
  * Jump to tag; handling of tag commands and tag stack
  *
@@ -148,6 +152,7 @@ do_tag(
     int		skip_msg = FALSE;
     char_u	*buf_ffname = curbuf->b_ffname;	    /* name to use for
 						       priority computation */
+    int         use_tfu = 1;
 
     /* remember the matches for the last used tag */
     static int		num_matches = 0;
@@ -172,6 +177,7 @@ do_tag(
     {
 	type = DT_TAG;
 	no_regexp = TRUE;
+	use_tfu = 0;
     }
 
     prev_num_matches = num_matches;
@@ -527,6 +533,10 @@ do_tag(
 #endif
 	    if (verbose)
 		flags |= TAG_VERBOSE;
+
+	    if (!use_tfu)
+		flags |= TAG_NO_TFU;
+
 	    if (find_tags(name, &new_num_matches, &new_matches, flags,
 					    max_num_matches, buf_ffname) == OK
 		    && new_num_matches < max_num_matches)
@@ -1218,6 +1228,205 @@ prepare_pats(pat_T *pats, int has_re)
 	pats->regmatch.regprog = NULL;
 }
 
+#ifdef FEAT_COMPL_FUNC
+/*
+ * find_tfu_tags() - call the user-defined function to generate a list of tags
+ *                   used by find_tags().
+ *
+ * Return OK if at least 1 tag has been successfully found,
+ * NOTDONE if function returns v:null, and FAIL otherwise.
+ */
+    static int
+find_tfu_tags(
+    char_u *pat,	// pattern supplied to the user-defined function
+    garray_T *ga,	// the tags will be placed here
+    int *match_count,	// here the number of tags found will be placed
+    int flags)		// used to compose a string containing flags passed
+			// to the function
+{
+    pos_T       pos;
+    list_T      *taglist;
+    listitem_T  *item;
+    int         ntags = 0;
+    int         result = FAIL;
+    typval_T	args[3];
+    typval_T	rettv;
+    char_u      flagString[3];
+
+    if (*curbuf->b_p_tfu == NUL)
+	return FAIL;
+
+    args[0].v_type = VAR_STRING;
+    args[0].vval.v_string = pat;
+    args[1].v_type = VAR_STRING;
+    args[1].vval.v_string = flagString;
+    args[2].v_type = VAR_UNKNOWN;
+
+    vim_snprintf((char *)flagString, sizeof(flagString),
+		 "%s%s",
+		 g_tag_at_cursor      ? "c": "",
+		 flags & TAG_INS_COMP ? "i": "");
+
+    pos = curwin->w_cursor;
+    result = call_vim_function(curbuf->b_p_tfu, 2, args, &rettv);
+    curwin->w_cursor = pos;	/* restore the cursor position */
+
+    if (result == FAIL)
+	return FAIL;
+    if (rettv.v_type == VAR_SPECIAL && rettv.vval.v_number == VVAL_NULL)
+    {
+	clear_tv(&rettv);
+	return NOTDONE;
+    }
+    if (rettv.v_type != VAR_LIST || !rettv.vval.v_list)
+    {
+	clear_tv(&rettv);
+	return FAIL;
+    }
+    taglist = rettv.vval.v_list;
+
+    for (item = taglist->lv_first; item != NULL; item = item->li_next)
+    {
+	char_u			*mfp;
+	char_u			*res_name, *res_fname, *res_cmd, *res_kind;
+	int			len;
+	struct dict_iterator_S	iter;
+	char_u			*dict_key;
+	typval_T		*tv;
+	int			has_extra = 0;
+
+	if (item->li_tv.v_type != VAR_DICT)
+	    continue;
+
+#ifdef FEAT_EMACS_TAGS
+	len = 3;
+#else
+	len = 2;
+#endif
+
+	res_name = NULL;
+	res_fname = NULL;
+	res_cmd = NULL;
+	res_kind = NULL;
+
+	dict_iterate_start(&item->li_tv, &iter);
+	while (NULL != (dict_key = dict_iterate_next(&iter, &tv)))
+	{
+	    if (tv->v_type != VAR_STRING || tv->vval.v_string == NULL)
+		continue;
+
+	    len += STRLEN(tv->vval.v_string) + 1; /* Space for "\tVALUE". */
+	    if (!STRCMP(dict_key, "name"))
+	    {
+		res_name = tv->vval.v_string;
+		continue;
+	    }
+	    if (!STRCMP(dict_key, "filename"))
+	    {
+		res_fname = tv->vval.v_string;
+		continue;
+	    }
+	    if (!STRCMP(dict_key, "cmd"))
+	    {
+		res_cmd = tv->vval.v_string;
+		continue;
+	    }
+	    has_extra = 1;
+	    if (!STRCMP(dict_key, "kind"))
+	    {
+		res_kind = tv->vval.v_string;
+		continue;
+	    }
+	    len += STRLEN(dict_key) + 1; /* Other elements will be stored as "\tKEY:VALUE".
+					  * Allocate space for the key and the colon. */
+	}
+
+	if (has_extra)
+	    len += 2; /* need space for ;" */
+
+	if (!res_name || !res_fname || !res_cmd)
+	    continue;
+
+	mfp = (char_u *)alloc((int)sizeof(char_u) + len + 1);
+	if (mfp != NULL)
+	{
+	    char_u *p = mfp;
+	    *p++ = MT_GL_OTH + 1;   /* mtt */
+	    *p++ = TAG_SEP;	/* no tag file name */
+#ifdef FEAT_EMACS_TAGS
+	    *p++ = TAG_SEP;
+#endif
+
+	    STRCPY(p, res_name);
+	    p += STRLEN(p);
+
+	    *p++ = TAB;
+	    STRCPY(p, res_fname);
+	    p += STRLEN(p);
+
+	    *p++ = TAB;
+	    STRCPY(p, res_cmd);
+	    p += STRLEN(p);
+
+	    if (has_extra)
+	    {
+		STRCPY(p, ";\"");
+		p += STRLEN(p);
+
+		if (res_kind)
+		{
+		    *p++ = TAB;
+		    STRCPY(p, res_kind);
+		    p += STRLEN(p);
+		}
+
+		dict_iterate_start(&item->li_tv, &iter);
+		while (NULL != (dict_key = dict_iterate_next(&iter, &tv)))
+		{
+		    if (tv->v_type != VAR_STRING || tv->vval.v_string == NULL)
+			continue;
+
+		    if (!STRCMP(dict_key, "name"))
+			continue;
+		    if (!STRCMP(dict_key, "filename"))
+			continue;
+		    if (!STRCMP(dict_key, "cmd"))
+			continue;
+		    if (!STRCMP(dict_key, "kind"))
+			continue;
+
+		    *p++ = TAB;
+		    STRCPY(p, dict_key);
+		    p += STRLEN(p);
+		    STRCPY(p, ":");
+		    p += STRLEN(p);
+		    STRCPY(p, tv->vval.v_string);
+		    p += STRLEN(p);
+		}
+	    }
+
+	    /* Add all matches because tagfunc should do filtering. */
+	    if (ga_grow(ga, 1) == OK)
+	    {
+		((char_u **)(ga->ga_data))[ga->ga_len++] = mfp;
+		++ntags;
+		result = OK;
+	    }
+	    else
+	    {
+		vim_free(mfp);
+		break;
+	    }
+	}
+    }
+
+    clear_tv(&rettv);
+
+    *match_count = ntags;
+    return result;
+}
+#endif
+
 /*
  * find_tags() - search for tags in tags files
  *
@@ -1243,6 +1452,7 @@ prepare_pats(pat_T *pats, int has_re)
  * TAG_NOIC	  don't always ignore case
  * TAG_KEEP_LANG  keep language
  * TAG_CSCOPE	  use cscope results for tags
+ * TAG_NO_TFU	  do not invoke the 'tagfunc' command
  */
     int
 find_tags(
@@ -1360,6 +1570,10 @@ find_tags(
     int		use_cscope = (flags & TAG_CSCOPE);
 #endif
     int		verbose = (flags & TAG_VERBOSE);
+#ifdef FEAT_COMPL_FUNC
+    int         use_tfu = ((flags & TAG_NO_TFU) == 0);
+    static int  tfu_call_level = 0;
+#endif
     int		save_p_ic = p_ic;
 
     /*
@@ -1455,6 +1669,17 @@ find_tags(
     vim_memset(&search_info, 0, (size_t)1);
 #endif
 
+#ifdef FEAT_COMPL_FUNC
+    if (*curbuf->b_p_tfu != NUL && use_tfu && tfu_call_level == 0)
+    {
+	++tfu_call_level;
+	retval = find_tfu_tags(pat, &ga_match[0], &match_count, flags);
+	--tfu_call_level;
+	if (retval != NOTDONE)
+	    goto findtag_end;
+    }
+#endif
+
     /*
      * When finding a specified number of matches, first try with matching
      * case, so binary search can be used, and try ignore-case matches in a
@@ -2333,7 +2558,6 @@ find_tags(
 		}
 		else
 		{
-#define TAG_SEP 0x02
 		    size_t tag_fname_len = STRLEN(tag_fname);
 #ifdef FEAT_EMACS_TAGS
 		    size_t ebuf_len = 0;
@@ -3838,11 +4062,11 @@ expand_tags(
 	tagnmflag = 0;
     if (pat[0] == '/')
 	ret = find_tags(pat + 1, num_file, file,
-		TAG_REGEXP | tagnmflag | TAG_VERBOSE,
+		TAG_REGEXP | tagnmflag | TAG_VERBOSE | TAG_NO_TFU,
 		TAG_MANY, curbuf->b_ffname);
     else
 	ret = find_tags(pat, num_file, file,
-		TAG_REGEXP | tagnmflag | TAG_VERBOSE | TAG_NOIC,
+		TAG_REGEXP | tagnmflag | TAG_VERBOSE | TAG_NO_TFU | TAG_NOIC,
 		TAG_MANY, curbuf->b_ffname);
     if (ret == OK && !tagnames)
     {
diff --git a/src/vim.h b/src/vim.h
index be1ec1d317..f9569bdd80 100644
--- a/src/vim.h
+++ b/src/vim.h
@@ -1150,6 +1150,7 @@ typedef struct {
 #define TAG_VERBOSE	32	/* message verbosity */
 #define TAG_INS_COMP	64	/* Currently doing insert completion */
 #define TAG_KEEP_LANG	128	/* keep current language */
+#define TAG_NO_TFU	256	/* don't evaluate 'tagfunc' */
 
 #define TAG_MANY	300	/* When finding many tags (for completion),
 				   find up to this many tags */
