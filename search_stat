Display Search Stat when searching, e.g. when searching vor foobar, will
display [ 1/10] /foobar when the cursor has been moved to the first match
in the buffer.

Must be explicitly enabled by using :set shortmess-=S
(but this will have a performance impact). Count is limited to at max 99
positions, to not impact performance too much.

Some performance improvements have been made, by caching the count and adding
a time limit of 20ms after which the counting of all search hits will be
aborted.

Version 4:
	- Add Time Limit 20ms

Version 3:
	- Cache values

Version 2:
        - works correctly upwards and downwards
	- works correctly when 'rl' is set
	- works correctly when cmdline is truncated
	- shows first search string and later the stat (once it is available)

Patch:      search_stat
Repository: https://github.com/chrisbra/vim-mq-patches
Vim ticket: https://github.com/vim/vim/issues/453

Copyright & License:
© 2015 C.Brabandt Vim
──────────────────────────────────────────────────────────────────────────

# HG changeset patch
# Parent df6c56e8ae40f858084d4065455ba2fa3ebc9788

diff --git a/runtime/doc/options.txt b/runtime/doc/options.txt
--- a/runtime/doc/options.txt
+++ b/runtime/doc/options.txt
@@ -6435,7 +6435,7 @@ A jump table for the options with a shor
 	function to get the effective shiftwidth value.
 
 						*'shortmess'* *'shm'*
-'shortmess' 'shm'	string	(Vim default "filnxtToO", Vi default: "",
+'shortmess' 'shm'	string	(Vim default "filnxtToOS", Vi default: "S",
 							POSIX default: "A")
 			global
 			{not in Vi}
@@ -6474,6 +6474,8 @@ A jump table for the options with a shor
 	  c	don't give |ins-completion-menu| messages.  For example,
 		"-- XXX completion (YYY)", "match 1 of 2", "The only match",
 		"Pattern not found", "Back at original", etc.
+	  S     don't show search count message when searching, e.g.
+	        "[ 1/5 ]"
 
 	This gives you the opportunity to avoid that a change between buffers
 	requires you to hit <Enter>, but still gives as useful a message as
diff --git a/runtime/doc/pattern.txt b/runtime/doc/pattern.txt
--- a/runtime/doc/pattern.txt
+++ b/runtime/doc/pattern.txt
@@ -152,6 +152,15 @@ use <Esc> to abandon the search.
 All matches for the last used search pattern will be highlighted if you set
 the 'hlsearch' option.  This can be suspended with the |:nohlsearch| command.
 
+When 'shortmess' does not include the "S" flag, Vim will automatically show an
+index, on which the cursor is. This can look like this: >
+
+  [ 1/5 ]	Cursor is on first of 5 matches
+  [ 1/>99]      Cursor is on first of more than 99 matches
+  [>99/>99]     Cursor is after 99 match of more than 99 matches
+  [ ?/??]       Unknown how many matches exists, generating the
+                statistics was aborted because of bad performance.
+
 When no match is found you get the error: *E486* Pattern not found
 Note that for the |:global| command this behaves like a normal message, for Vi
 compatibility.  For the |:s| command the "e" flag can be used to avoid the
diff --git a/src/option.c b/src/option.c
--- a/src/option.c
+++ b/src/option.c
@@ -2370,7 +2370,7 @@ static struct vimoption
 			    {(char_u *)8L, (char_u *)0L} SCRIPTID_INIT},
     {"shortmess",   "shm",  P_STRING|P_VIM|P_FLAGLIST,
 			    (char_u *)&p_shm, PV_NONE,
-			    {(char_u *)"", (char_u *)"filnxtToO"}
+			    {(char_u *)"S", (char_u *)"filnxtToOS"}
 			    SCRIPTID_INIT},
     {"shortname",   "sn",   P_BOOL|P_VI_DEF,
 #ifdef SHORT_FNAME
diff --git a/src/option.h b/src/option.h
--- a/src/option.h
+++ b/src/option.h
@@ -213,7 +213,8 @@
 #define SHM_ATTENTION	'A'		/* no ATTENTION messages */
 #define SHM_INTRO	'I'		/* intro messages */
 #define SHM_COMPLETIONMENU  'c'		/* completion menu messages */
-#define SHM_ALL		"rmfixlnwaWtToOsAIc" /* all possible flags for 'shm' */
+#define SHM_SEARCHCOUNT  'S'		/* search stats: '[ 1/10 ]' when searching */
+#define SHM_ALL		"rmfixlnwaWtToOsAIcS" /* all possible flags for 'shm' */
 
 /* characters for p_go: */
 #define GO_ASEL		'a'		/* autoselect */
diff --git a/src/search.c b/src/search.c
--- a/src/search.c
+++ b/src/search.c
@@ -1158,6 +1158,7 @@ do_search(oap, dirc, pat, count, options
     char_u	    *dircp;
     char_u	    *strcopy = NULL;
     char_u	    *ps;
+    char_u	    *msgbuf = NULL;
 
     /*
      * A line offset is not remembered, this is vi compatible.
@@ -1317,27 +1318,36 @@ do_search(oap, dirc, pat, count, options
 	if ((options & SEARCH_ECHO) && messaging()
 					    && !cmd_silent && msg_silent == 0)
 	{
-	    char_u	*msgbuf;
 	    char_u	*trunc;
+	    int		len;
 
 	    if (*searchstr == NUL)
 		p = spats[last_idx].pat;
 	    else
 		p = searchstr;
-	    msgbuf = alloc((unsigned)(STRLEN(p) + 40));
+
+
+	    len = shortmess(SHM_SEARCHCOUNT) ? 0 : 11;
+
+	    /* allocate enough space for the search pattern + offset + search stat
+	     * but leave some space at the beginning to put the search stat there
+	     */
+	    msgbuf = alloc((unsigned)(STRLEN(p) + 40 + len));
 	    if (msgbuf != NULL)
 	    {
-		msgbuf[0] = dirc;
+		if (len)
+		    vim_memset(msgbuf, ' ', (size_t)len);
+		msgbuf[len] = dirc;
 #ifdef FEAT_MBYTE
 		if (enc_utf8 && utf_iscomposing(utf_ptr2char(p)))
 		{
 		    /* Use a space to draw the composing char on. */
-		    msgbuf[1] = ' ';
-		    STRCPY(msgbuf + 2, p);
+		    msgbuf[len + 1] = ' ';
+		    STRCPY(msgbuf + len + 2, p);
 		}
 		else
 #endif
-		    STRCPY(msgbuf + 1, p);
+		    STRCPY(msgbuf + len + 1, p);
 		if (spats[0].off.line || spats[0].off.end || spats[0].off.off)
 		{
 		    p = msgbuf + STRLEN(msgbuf);
@@ -1356,6 +1366,11 @@ do_search(oap, dirc, pat, count, options
 
 		msg_start();
 		trunc = msg_strtrunc(msgbuf, FALSE);
+		if (trunc != NULL)
+		{
+		    vim_free(msgbuf);
+		    msgbuf = trunc;
+		}
 
 #ifdef FEAT_RIGHTLEFT
 		/* The search pattern could be shown on the right in rightleft
@@ -1366,24 +1381,17 @@ do_search(oap, dirc, pat, count, options
 		{
 		    char_u *r;
 
-		    r = reverse_text(trunc != NULL ? trunc : msgbuf);
+		    r = reverse_text(msgbuf);
 		    if (r != NULL)
 		    {
-			vim_free(trunc);
-			trunc = r;
+			vim_free(msgbuf);
+			msgbuf = r;
 		    }
 		}
 #endif
-		if (trunc != NULL)
-		{
-		    msg_outtrans(trunc);
-		    vim_free(trunc);
-		}
-		else
-		    msg_outtrans(msgbuf);
+		msg_outtrans(msgbuf);
 		msg_clr_eos();
 		msg_check();
-		vim_free(msgbuf);
 
 		gotocmdline(FALSE);
 		out_flush();
@@ -1438,6 +1446,140 @@ do_search(oap, dirc, pat, count, options
 
 	if (dircp != NULL)
 	    *dircp = dirc;	/* restore second '/' or '?' for normal_cmd() */
+
+	if ((options & SEARCH_ECHO) && messaging()
+	    && !cmd_silent && msg_silent == 0 && c != FAIL &&
+	    !shortmess(SHM_SEARCHCOUNT) && msgbuf != NULL)
+	{
+	    int	    old_ws = p_ws;
+	    char_u  *trunc;
+	    int	    wraparound = FALSE;
+	    static  pos_T   lastpos = {0, 0
+#ifdef FEAT_VIRTUALEDIT
+		, 0
+#endif
+	    };
+	    static int	    cur = 0;
+	    static int	    cnt = 0;
+	    static int	    chgtick = 0;
+	    static char_u   *lastpat = NULL;
+	    static buf_T    *lbuf = NULL;
+
+	    wraparound = ((dirc == '?' && lt(lastpos, pos)) ||
+		    (dirc == '/' && lt(pos, lastpos)));
+
+	    /* MB_STRNICMP ignores case, but we should not ignore case.
+	     * Unfortunately, there is not MB_STRNICMP function */
+	    if (!(chgtick == curbuf->b_changedtick &&
+		    MB_STRNICMP(lastpat, spats[last_idx].pat, STRLEN(lastpat)) == 0 &&
+		    equalpos(lastpos, curwin->w_cursor) &&
+		    lbuf == curbuf) || wraparound || cur < 0 || cur > 99)
+
+	    {
+		cur = 0;
+		cnt = 0;
+		clearpos(&lastpos);
+		lbuf = curbuf;
+	    }
+
+
+	    if (equalpos(lastpos, curwin->w_cursor) && !wraparound)
+		cur += dirc == '/' ? 1 : -1;
+	    else
+	    {
+		p_ws = FALSE;
+#ifdef FEAT_RELTIME
+		proftime_T  start;
+
+		profile_setlimit(20L, &start);
+		    /* Stop after passing the "tm" time limit. */
+#else
+		time_T seconds = (time_t)0;
+#endif
+		while (!got_int && searchit(curwin, curbuf, &lastpos, FORWARD, NULL, 1,
+			SEARCH_PEEK + SEARCH_KEEP, RE_LAST, (linenr_T)0, NULL) != FAIL)
+		{
+		    if
+#ifdef FEAT_RELTIME
+		    (profile_passed_limit(&start))
+#else
+		     (time(NULL) - start > (time_t)0)
+#endif
+		    {
+			cnt = 150;
+			cur = 150;
+			break;
+		    }
+		    cnt++;
+		    if (ltoreq(lastpos, pos))
+			cur++;
+		    fast_breakcheck();
+		    if (cnt > 99)
+			break;
+		}
+		if (got_int)
+		    cur = -1; /* abort */
+	    }
+	    if (cur > 0)
+	    {
+		char	t[11] = "";
+#ifdef FEAT_RIGHTLEFT
+		if (curwin->w_p_rl && *curwin->w_p_rlc == 's')
+		{
+		    if (cur == 150) /* time limit hit */
+			sprintf(t, " [ ?/??]");
+		    else if (cnt > 99 && cur > 99)
+			sprintf(t, " [>99/>99]");
+		    else if (cnt > 99)
+			sprintf(t, " [>99/% 2d]", cur);
+		    else
+			sprintf(t, " [% 2d/%-2d]", cur, cnt);
+		    STRNCPY(msgbuf + STRLEN(msgbuf) - 11, t, STRLEN(t));
+		}
+		else
+#endif
+		{
+		    if (cur == 150)
+			sprintf(t, " [ ?/??]");
+		    else if (cnt > 99 && cur > 99)
+			sprintf(t, "[>99/>99] ");
+		    else if (cnt > 99)
+			sprintf(t, "[% 2d/>99] ", cur);
+		    else
+			sprintf(t, "[% 2d/%-2d]  ", cur, cnt);
+		    STRNCPY(msgbuf, t, STRLEN(t));
+		}
+		if (dirc == '?' && cur == 100)
+		    cur = -1;
+
+		if (!shortmess(SHM_SEARCH) && (options & SEARCH_MSG) && lt(curwin->w_cursor, lastpos))
+		    ui_delay(1000L, FALSE);  /* leave some time for top_bot_msg */
+
+		vim_free(lastpat);
+		lastpat = vim_strsave(spats[last_idx].pat);
+		chgtick = curbuf->b_changedtick;
+		lbuf    = curbuf;
+		lastpos = pos;
+
+		msg_start();
+		trunc = msg_strtrunc(msgbuf, FALSE);
+		if (trunc != NULL)
+		{
+		    vim_free(msgbuf);
+		    msgbuf = trunc;
+		}
+
+		msg_outtrans(msgbuf);
+		msg_clr_eos();
+		msg_check();
+
+		gotocmdline(FALSE);
+		out_flush();
+		msg_nowait = TRUE;	    /* don't wait for this message */
+	    }
+	    p_ws = old_ws;
+	}
+
 	if (c == FAIL)
 	{
 	    retval = 0;
@@ -1516,6 +1658,7 @@ end_do_search:
     if ((options & SEARCH_KEEP) || cmdmod.keeppatterns)
 	spats[0].off = old_off;
     vim_free(strcopy);
+    vim_free(msgbuf);
 
     return retval;
 }
