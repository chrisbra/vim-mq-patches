From 224dce5ad54ef33d36d764d96902252302935752 Mon Sep 17 00:00:00 2001
From: Christian Brabandt <cb@256bit.org>
Date: Tue, 13 Mar 2018 19:47:24 +0100
Subject: [PATCH] :rundo! patch

This allows to force reading an undo file.

Usage:

First create many, many many empty lines (needs to be more lines than
your original file had). Then do  `:rundo! file.un~` to force reading
the content of the undo file.

Repository:
https://github.com/chrisbra/vim-mq-patches
git://github.com/chrisbra/vim-mq-patches.git

Original Implementation:
https://groups.google.com/d/msg/vim_use/pOia0eB8ZWo/3Oc_WSP68x4J

Filename:
rundo_force

Latest update for:
vim-8.0.1600

Bug reports: <cb@256bit.org>

License & Copyright:
© 2011 Christian Brabandt
─────────────────────────────────────────────────────────────────────────────
---
 src/evalfunc.c     |  1 +
 src/ex_cmds.c      |  1 +
 src/ex_docmd.c     |  2 +-
 src/fileio.c       | 11 ++++++++++-
 src/option.c       |  2 +-
 src/proto/undo.pro |  2 +-
 src/structs.h      |  1 +
 src/undo.c         | 50 +++++++++++++++++++++++++++++++++++++++++++++++---
 8 files changed, 63 insertions(+), 7 deletions(-)

diff --git a/src/evalfunc.c b/src/evalfunc.c
index 6076b035a..f3d14400b 100644
--- a/src/evalfunc.c
+++ b/src/evalfunc.c
@@ -13303,6 +13303,7 @@ f_undotree(typval_T *argvars UNUSED, typval_T *rettv)
 	dict_add_nr_str(dict, "seq_cur", curbuf->b_u_seq_cur, NULL);
 	dict_add_nr_str(dict, "time_cur", (long)curbuf->b_u_time_cur, NULL);
 	dict_add_nr_str(dict, "save_cur", (long)curbuf->b_u_save_nr_cur, NULL);
+	dict_add_nr_str(dict, "whole_buf", (long)curbuf->b_u_save_buf, NULL);
 
 	list = list_alloc();
 	if (list != NULL)
diff --git a/src/ex_cmds.c b/src/ex_cmds.c
index 6845be57d..2b80092a6 100644
--- a/src/ex_cmds.c
+++ b/src/ex_cmds.c
@@ -4091,6 +4091,7 @@ do_ecmd(
 		vim_free(new_name);
 		goto theend;
 	    }
+	    curbuf->b_u_save_buf++;
 	    u_unchanged(curbuf);
 	    buf_freeall(curbuf, BFA_KEEP_UNDO);
 
diff --git a/src/ex_docmd.c b/src/ex_docmd.c
index 97bbd0429..a45967279 100644
--- a/src/ex_docmd.c
+++ b/src/ex_docmd.c
@@ -9541,7 +9541,7 @@ ex_rundo(exarg_T *eap)
     char_u hash[UNDO_HASH_SIZE];
 
     u_compute_hash(hash);
-    u_read_undo(eap->arg, hash, NULL);
+    u_read_undo(eap->arg, hash, NULL, eap->forceit);
 }
 #endif
 
diff --git a/src/fileio.c b/src/fileio.c
index 05c3df50b..77b95bf7a 100644
--- a/src/fileio.c
+++ b/src/fileio.c
@@ -2678,7 +2678,7 @@ failed:
 	char_u	hash[UNDO_HASH_SIZE];
 
 	sha256_finish(&sha_ctx, hash);
-	u_read_undo(NULL, hash, fname);
+	u_read_undo(NULL, hash, fname, FALSE);
     }
 #endif
 
@@ -4565,8 +4565,17 @@ restore_backup:
 			    && reset_changed
 			    && !checking_conversion);
 	if (write_undo_file)
+	{
+	    if (p_ur < 0 || buf->b_ml.ml_line_count <= p_ur)
+	    {
+		/* Save buffer contents in undotree
+		* to enable recovery, when 'ur' is set */
+		u_savecommon(0, buf->b_ml.ml_line_count + 1, 0, TRUE);
+		buf->b_u_save_buf++;
+	    }
 	    /* Prepare for computing the hash value of the text. */
 	    sha256_start(&sha_ctx);
+	}
 #endif
 
 	write_info.bw_len = bufsize;
diff --git a/src/option.c b/src/option.c
index 084e5e1a6..19382a9d4 100644
--- a/src/option.c
+++ b/src/option.c
@@ -8154,7 +8154,7 @@ set_bool_option(
 			&& !curbufIsChanged() && curbuf->b_ml.ml_mfp != NULL)
 		{
 		    u_compute_hash(hash);
-		    u_read_undo(NULL, hash, curbuf->b_fname);
+		    u_read_undo(NULL, hash, curbuf->b_fname, FALSE);
 		}
 	    }
 	    curbuf = save_curbuf;
diff --git a/src/proto/undo.pro b/src/proto/undo.pro
index 1052d40c2..12d381d92 100644
--- a/src/proto/undo.pro
+++ b/src/proto/undo.pro
@@ -9,7 +9,7 @@ int u_savecommon(linenr_T top, linenr_T bot, linenr_T newbot, int reload);
 void u_compute_hash(char_u *hash);
 char_u *u_get_undo_file_name(char_u *buf_ffname, int reading);
 void u_write_undo(char_u *name, int forceit, buf_T *buf, char_u *hash);
-void u_read_undo(char_u *name, char_u *hash, char_u *orig_name);
+void u_read_undo(char_u *name, char_u *hash, char_u *orig_name, int force);
 void u_undo(int count);
 void u_redo(int count);
 void undo_time(long step, int sec, int file, int absolute);
diff --git a/src/structs.h b/src/structs.h
index db2792bbd..8358dbccd 100644
--- a/src/structs.h
+++ b/src/structs.h
@@ -2077,6 +2077,7 @@ struct file_buffer
     int		b_u_synced;	/* entry lists are synced */
     long	b_u_seq_last;	/* last used undo sequence number */
     long	b_u_save_nr_last; /* counter for last file write */
+    long	b_u_save_buf;	/* counter for when buffer was completly saved in undo tree */
     long	b_u_seq_cur;	/* hu_seq of header below which we are now */
     time_T	b_u_time_cur;	/* uh_time of header below which we are now */
     long	b_u_save_nr_cur; /* file write nr after which we are now */
diff --git a/src/undo.c b/src/undo.c
index 09bcc91be..a739edbf3 100644
--- a/src/undo.c
+++ b/src/undo.c
@@ -739,6 +739,7 @@ nomem:
 
 /* extra fields for header */
 # define UF_LAST_SAVE_NR	1
+# define UF_SAVE_WHOLE_BUF	2
 
 /* extra fields for uhp */
 # define UHP_SAVE_NR		1
@@ -1220,6 +1221,9 @@ serialize_header(bufinfo_T *bi, char_u *hash)
     undo_write_bytes(bi, 4, 1);
     undo_write_bytes(bi, UF_LAST_SAVE_NR, 1);
     undo_write_bytes(bi, (long_u)buf->b_u_save_nr_last, 4);
+    undo_write_bytes(bi, 4, 1);
+    undo_write_bytes(bi, UF_SAVE_WHOLE_BUF, 1);
+    undo_write_bytes(bi, (long_u)buf->b_u_save_buf, 4);
 
     undo_write_bytes(bi, 0, 1);  /* end marker */
 
@@ -1783,7 +1787,7 @@ theend:
  * "hash[UNDO_HASH_SIZE]" must be the hash value of the buffer text.
  */
     void
-u_read_undo(char_u *name, char_u *hash, char_u *orig_name)
+u_read_undo(char_u *name, char_u *hash, char_u *orig_name, int force)
 {
     char_u	*file_name;
     FILE	*fp;
@@ -1796,6 +1800,7 @@ u_read_undo(char_u *name, char_u *hash, char_u *orig_name)
     long	old_header_seq, new_header_seq, cur_header_seq;
     long	seq_last, seq_cur;
     long	last_save_nr = 0;
+    long	last_save_buf = 0;
     short	old_idx = -1, new_idx = -1, cur_idx = -1;
     long	num_read_uhps = 0;
     time_t	seq_time;
@@ -1914,8 +1919,8 @@ u_read_undo(char_u *name, char_u *hash, char_u *orig_name)
 	goto error;
     }
     line_count = (linenr_T)undo_read_4c(&bi);
-    if (memcmp(hash, read_hash, UNDO_HASH_SIZE) != 0
-				  || line_count != curbuf->b_ml.ml_line_count)
+    if ((memcmp(hash, read_hash, UNDO_HASH_SIZE) != 0
+	|| line_count != curbuf->b_ml.ml_line_count) && !force)
     {
 	if (p_verbose > 0 || name != NULL)
 	{
@@ -1929,6 +1934,7 @@ u_read_undo(char_u *name, char_u *hash, char_u *orig_name)
 	goto error;
     }
 
+
     /* Read undo data for "U" command. */
     str_len = undo_read_4c(&bi);
     if (str_len < 0)
@@ -1966,6 +1972,9 @@ u_read_undo(char_u *name, char_u *hash, char_u *orig_name)
 	    case UF_LAST_SAVE_NR:
 		last_save_nr = undo_read_4c(&bi);
 		break;
+	    case UF_SAVE_WHOLE_BUF:
+		last_save_buf = undo_read_4c(&bi);
+		break;
 	    default:
 		/* field not supported, skip */
 		while (--len >= 0)
@@ -2098,10 +2107,45 @@ u_read_undo(char_u *name, char_u *hash, char_u *orig_name)
     curbuf->b_u_time_cur = seq_time;
     curbuf->b_u_save_nr_last = last_save_nr;
     curbuf->b_u_save_nr_cur = last_save_nr;
+    curbuf->b_u_save_buf = last_save_buf;
 
     curbuf->b_u_synced = TRUE;
     vim_free(uhp_table);
 
+    if (force)
+    {
+      if (curbuf->b_u_save_nr_last == 0
+	|| curbuf->b_u_save_buf == 0)
+      {
+	EMSG(_("Recovery from Undo not possible!"));
+	u_blockfree(curbuf);
+	curbuf->b_u_line_lnum = 0;
+	curbuf->b_u_line_colnr = 0;
+	curbuf->b_u_numhead = 0;
+	curbuf->b_u_seq_last = 0;
+	curbuf->b_u_seq_cur = 0;
+	curbuf->b_u_time_cur = 0;
+	curbuf->b_u_save_nr_last = 0;
+	curbuf->b_u_save_nr_cur = 0;
+	curbuf->b_u_save_buf = 0;
+      }
+      else
+	/* Move to just after the last file write
+	   TODO: Create as many new lines as are at the position
+	   in the undotree, where b_u_save_buf points to,
+	   using something like:
+
+	   for (i=0; i < lines_in_undotree; i++)
+		ml_append(curbuf->b_ml.ml_line_count - 1, (char_u *) "", (colnr_T)0, FALSE);
+	   appended_lines_mark(curbuf->b_ml.ml_line_count - i, i);
+
+	   Use undojoin!
+	   */
+
+	undo_time(curbuf->b_u_save_buf, FALSE, TRUE, TRUE);
+    }
+
+
 #ifdef U_DEBUG
     for (i = 0; i < num_head; ++i)
 	if (uhp_table_used[i] == 0)
-- 
2.14.1

