# HG changeset patch
# Parent a56d1c71f4208b9746dd5e1c34c378c70c396b37

diff --git a/runtime/doc/autocmd.txt b/runtime/doc/autocmd.txt
--- a/runtime/doc/autocmd.txt
+++ b/runtime/doc/autocmd.txt
@@ -271,6 +271,8 @@ Name			triggered by ~
 |VimLeave|		before exiting Vim, after writing the viminfo file
 
 	Various
+|Error|			When an error occurs.
+
 |FileChangedShell|	Vim notices that a file changed since editing started
 |FileChangedShellPost|	After handling a file changed since editing started
 |FileChangedRO|		before making the first change to a read-only file
@@ -554,6 +556,11 @@ CursorMovedI			After the cursor was move
 							*EncodingChanged*
 EncodingChanged			Fires off after the 'encoding' option has been
 				changed.  Useful to set up fonts, for example.
+							*Error*
+Error				Triggers, when an error message is recevied.
+				The pattern is matched against the error
+				message. Use |v:errmsg| to get the complete
+				errormessage.
 							*FileAppendCmd*
 FileAppendCmd			Before appending to a file.  Should do the
 				appending to the file.  Use the '[ and ']
diff --git a/src/fileio.c b/src/fileio.c
--- a/src/fileio.c
+++ b/src/fileio.c
@@ -7658,6 +7658,7 @@ static struct event_name
     {"CursorMoved",	EVENT_CURSORMOVED},
     {"CursorMovedI",	EVENT_CURSORMOVEDI},
     {"EncodingChanged",	EVENT_ENCODINGCHANGED},
+    {"Error",		EVENT_ERROR},
     {"FileEncoding",	EVENT_ENCODINGCHANGED},
     {"FileAppendPost",	EVENT_FILEAPPENDPOST},
     {"FileAppendPre",	EVENT_FILEAPPENDPRE},
@@ -9362,7 +9363,7 @@ apply_autocmds_group(event, fname, fname
     {
 	sfname = vim_strsave(fname);
 	/* Don't try expanding FileType, Syntax, FuncUndefined, WindowID,
-	 * ColorScheme or QuickFixCmd* */
+	 * ColorScheme, Error or QuickFixCmd* */
 	if (event == EVENT_FILETYPE
 		|| event == EVENT_SYNTAX
 		|| event == EVENT_FUNCUNDEFINED
@@ -9370,6 +9371,7 @@ apply_autocmds_group(event, fname, fname
 		|| event == EVENT_SPELLFILEMISSING
 		|| event == EVENT_QUICKFIXCMDPRE
 		|| event == EVENT_COLORSCHEME
+		|| event == EVENT_ERROR
 		|| event == EVENT_QUICKFIXCMDPOST)
 	    fname = vim_strsave(fname);
 	else
diff --git a/src/message.c b/src/message.c
--- a/src/message.c
+++ b/src/message.c
@@ -621,6 +621,9 @@ emsg(s)
 	/* set "v:errmsg", also when using ":silent! cmd" */
 	set_vim_var_string(VV_ERRMSG, s, -1);
 #endif
+#ifdef FEAT_AUTOCMD
+	apply_autocmds(EVENT_ERROR, s, curbuf->b_fname, FALSE, curbuf);
+#endif
 
 	/*
 	 * When using ":silent! cmd" ignore error messages.
diff --git a/src/misc2.c b/src/misc2.c
--- a/src/misc2.c
+++ b/src/misc2.c
@@ -6127,6 +6127,9 @@ emsg3(s, a1, a2)
 #else
     vim_snprintf((char *)IObuff, IOSIZE, (char *)s, (long_u)a1, (long_u)a2);
 #endif
+#ifdef FEAT_AUTOCMD
+	apply_autocmds(EVENT_ERROR, IObuff, curbuf->b_fname, FALSE, curbuf);
+#endif
     return emsg(IObuff);
 }
 
diff --git a/src/vim.h b/src/vim.h
--- a/src/vim.h
+++ b/src/vim.h
@@ -1311,6 +1311,7 @@ enum auto_event
     EVENT_WINENTER,		/* after entering a window */
     EVENT_WINLEAVE,		/* before leaving a window */
     EVENT_ENCODINGCHANGED,	/* after changing the 'encoding' option */
+    EVENT_ERROR,		/* an error occured */
     EVENT_INSERTCHARPRE,	/* before inserting a char */
     EVENT_CURSORHOLD,		/* cursor in same position for a while */
     EVENT_CURSORHOLDI,		/* idem, in Insert mode */
